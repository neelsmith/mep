import edu.holycross.shot.mep.*
import groovy.xml.MarkupBuilder

import edu.harvard.chs.cite.CtsUrn
import edu.harvard.chs.cite.CiteUrn

String contentType = "text/html"
response.setContentType(contentType)
response.setHeader( "Access-Control-Allow-Origin", "*")


String serverUrl = "@tripleserver@"

boolean done = false


String  getPageSummary(CiteUrn urn, MepGraph graph) {
    CtsUrn mainScholia = new CtsUrn('urn:cts:greekLit:tlg5026.msA.hmt')

    // get label from query...
    // get basic stats from query...
    MepPage pg = new MepPage(urn,graph)
    MepLayout ml = new MepLayout(pg)


    StringWriter writer = new StringWriter()
    MarkupBuilder html = new MarkupBuilder(writer)
    html.html {
        head {
            title("Venetus A, page ${urn.getObjectId()}")
            link(type : 'text/css',  rel : 'stylesheet',  href : 'css/mep.css', title : 'CSS stylesheet')	
        }
        body {
            header {
                nav (role: 'navigation') {
                    mkp.yield "MEP: " 
                    a (href : "home", "home")
                    mkp.yield " | "
                    a (href : "documentation/index.html", "documentation")
                }
                h1 ("Venetus A, page ${urn.getObjectId()}")
            }
            article {
                p {
                    if (pg.getPrevPage() != "") {
                        a(href : "vapage?urn=${pg.getPrevPage()}", "previous")
                    } else {
                        mkp.yield ("previous")
                    }
                    mkp.yield (" | ")
                    if (pg.getNextPage() != "") {
                        a(href : "vapage?urn=${pg.getNextPage()}", "next")
                    } else {
                        mkp.yield ("next")
                    }
                }

                div ('id' : "leftDiv") {
                    a (href : "@images@request=GetIIPMooViewer&urn=${pg.getImg()}") {
                        img(src : "@images@?request=GetBinaryImage&urn=${pg.getImg()}&w=@imgw@")
                    }
                }
                div ('id' : "rightDiv") {
                    // compute density data:
                    def cScore = ml.score(pg.commentary, ml.rankScholia(pg.getScholiaForDocument(mainScholia), pg.churikZones), ml.computeChurikRankForIliad() )
                    def cright = 0
                    cScore.keySet().each { k -> 
                        if (cScore[k] == true ) {
                            cright++
                        }
                    }
                
                    def mScore = ml.score(pg.commentary, ml.rankScholia(pg.getScholiaForDocument(mainScholia), pg.maniaciZones), ml.computeManiaciRankForIliad() )
                    def mright = 0
                    mScore.keySet().each { k -> 
                        if (mScore[k] == true ) {
                            mright++
                        }
                    }

                    h2("Density of text and commentary")
                    p { 
                        strong("No. of Iliad lines ")
                        mkp.yield "${pg.getIliadLines().size()}"
                    }

                    p {
                        CtsUrn range = new CtsUrn(pg.getIliadRange())
                        em("Iliad ")
                        a (href: "@texts@?request=GetPassagePlus&urn=${range}") {
                            mkp.yield " ${range.getPassageComponent()}"
                        }
                        
                    }
                    table {

                        thead {
                            tr {
                                th()
                                th("All")
                                th("Main scholia")
                            }
                        }
                        tbody {
                            tr {
                                th ("No. of scholia")
                                td ("${pg.numScholia}")
                                td("${pg.getScholiaForDocument(mainScholia).size()}")
                            }
                            tr {
                                th ("No. of tokens ('words')")
                                td ("${pg.numTokens}")
                                td ("${pg.countTokensForDocument(mainScholia)}")
                            }
                        }
                        
                    }

                    h2("Analysis of layout of main scholia")
                    table {
                        thead {
                            th()
                            th("Maniaci algorithm")
                            th("Churik algorithm")
                        }
                        tbody {
                            th("correct/total")
                            td( "${mright}/" + mScore.size() )
                            td( "${cright}/" + cScore.size() )
                        }
                    }

                    ul {
                        li { 
                            mkp.yield ("View ")
                            a(href : "churikview?urn=${urn}", "layout of Churik analysis")
                        }
                        li {
                            mkp.yield ("View ")
                            a(href : "maniaciview?urn=${urn}", "layout of Maniaci analysis")
                        }
                    }
                }
            }
            footer    {
                mkp.yield "INSERTFOOTER"
            }
        }
    }
    
    String base = writer.toString()
    return base.replaceAll('INSERTFOOTER',"""@htmlfooter@""")
}



CiteUrn pgUrn  = null
if (request.getParameter("urn")) {
    try {
        pgUrn = new CiteUrn( request.getParameter("urn"))
    } catch (Exception e) {
        println("Need a valid 'urn' parameter:  got '" +pgUrn + "'.  ${e}")
        done = true
    }
} else  {
    println("Need a 'urn' parameter for the page to analyze.")
    done = true
}


if (!done) {
    MepGraph graph = new MepGraph(serverUrl)
    println getPageSummary(pgUrn, graph)
}
