import edu.holycross.shot.mep.*

import edu.harvard.chs.cite.CtsUrn
import edu.harvard.chs.cite.CiteUrn


String contentType = "text/xml"
response.setContentType(contentType)
response.setHeader( "Access-Control-Allow-Origin", "*")


String serverUrl = "@tripleserver@"

boolean done = false


String getVisualIndex(CiteUrn pageUrn, MepGraph sparql) {
    CtsUrn mainScholia = new CtsUrn('urn:cts:greekLit:tlg5026.msA.hmt')
    MepPage pg = new MepPage(pageUrn, sparql)
    MepLayout layout = new MepLayout(pg)
    String img = pg.getImg()

    StringBuffer xml = new StringBuffer("<citegraph xmlns='http://chs.harvard.edu/xmlns/citeindex'>\n<request><urn>${img}</urn></request>\n<reply>\n")
    xml.append("<graph urn='" + img + "'>")

    // show maniaci zones:
String seq2 = "<sequence s='" + "maniaci" + "' v='http://www.homermultitext.org/cite/rdf/illustrates' type='object'>\n"
xml.append(seq2)
    for (zone in MepPage.PageZone.TOP..MepPage.PageZone.BOTTOM) {
        String top
        BigDecimal topDecimal = pg.pageTop.toBigDecimal()
        BigDecimal height
        switch (zone) {
            case MepPage.PageZone.TOP:
                top = pg.pageTop
            height =  pg.maniaciZones[MepPage.PageZone.TOP] - topDecimal
            break
            case MepPage.PageZone.MIDDLE:
                top = "${pg.maniaciZones[MepPage.PageZone.TOP]}"
            height =  pg.maniaciZones[MepPage.PageZone.MIDDLE] - pg.maniaciZones[MepPage.PageZone.TOP] 
            break

            case MepPage.PageZone.BOTTOM:
                top = "${pg.maniaciZones[MepPage.PageZone.MIDDLE]}"
            height = pg.maniaciZones[MepPage.PageZone.BOTTOM] - pg.maniaciZones[MepPage.PageZone.MIDDLE]
            break
        }
        String imgRoi = "${img}@0,${top},1.0,${height}"
        String nodeStr =    "<node type='object' v='http://www.homermultitext.org/cite/rdf/illustrates' s='" + imgRoi + "'><label></label><value>urn:cite:mep:maniaci.${zone}</value></node>\n"
        System.err.println nodeStr
        xml.append(nodeStr)
}    
xml.append("</sequence>")

    def scoreMap = layout.score(pg.commentary, layout.rankScholia(pg.getScholiaForDocument(mainScholia), pg.maniaciZones), layout.computeManiaciRankForIliad() )
    def goodScores = [:]
    def badScores = [:]
    scoreMap.keySet().each { scholion ->
        if (scoreMap[scholion] == true) {
            goodScores[scholion] = "${img}@${pg.roiForScholion[scholion]}"
        } else {
            badScores[scholion] = "${img}@${pg.roiForScholion[scholion]}"
        }
    }

    def goodCount = 0
    goodScores.keySet().each { k ->
        if (goodCount == 0) {
            xml.append( "<sequence s='goodscores' v='http://www.homermultitext.org/cite/rdf/illustrates' type='text'>\n")
            xml.append("<label>Successful predictions</label>\n")
            xml.append("<value>\n")
        }
        goodCount++;
        String n = "<node type='text' v='http://www.homermultitext.org/cite/rdf/illustrates' s='" + goodScores[k] + "'><label>${k}</label><value>${k}</value></node>\n"
        xml.append(n)
    }
    xml.append("</value></sequence>\n")




    def badCount = 0
    badScores.keySet().each { k ->
        if (badCount == 0) {
            xml.append( "<sequence s='badscores' v='http://www.homermultitext.org/cite/rdf/illustrates' type='text'>\n")
            xml.append("<label>Unsuccessful predictions</label>\n")
            xml.append("<value>\n")
        }
        badCount++;
        String n = "<node type='text' v='http://www.homermultitext.org/cite/rdf/illustrates' s='" + badScores[k] + "'><label>${k}</label><value>${k}</value></node>\n"
        xml.append(n)
    }
    xml.append("</value></sequence>\n")

    xml.append("</graph>\n")
    xml.append("</reply>\n</citegraph>")
                                        
}


CiteUrn pgUrn  = null
if (request.getParameter("urn")) {
    try {
        pgUrn = new CiteUrn( request.getParameter("urn"))
    } catch (Exception e) {
        println("Need a valid 'urn' parameter:  got '" +pgUrn + "'.  ${e}")
        done = true
    }
} else  {
    println("Need a 'urn' parameter for the page to analyze.")
    done = true
}

if (!done) {
    println '<?xml-stylesheet type="text/xsl" href="xslt/index_image.xsl"?>\n'
    MepGraph graph = new MepGraph(serverUrl)
    println getVisualIndex(pgUrn, graph)
}
