import edu.holycross.shot.mep.*
import groovy.xml.MarkupBuilder
import edu.harvard.chs.cite.CiteUrn


String contentType = "text/html"
response.setContentType(contentType)
response.setHeader( "Access-Control-Allow-Origin", "*")


String serverUrl = "@tripleserver@"

MepGraph graph = new MepGraph(serverUrl)
MepMS ms = new MepMS(graph)


StringWriter writer = new StringWriter()
MarkupBuilder html = new MarkupBuilder(writer)


html.html {
    head {
        title("Mise en page")

	link(type : 'text/css',  rel : 'stylesheet',  href : 'css/mep.css', title : 'CSS stylesheet')
    }
    
    body {
    
    	header {
            div ('class' : "container") {
                div ('class' : "thumb") {
                    img ('class' : "logotop", src : "imgs/logo-anvil.png")
                }
                div(class : "content") {
                    h1("Mise en page: automated analysis of the layout of the Venetus A manuscript")
                }
            }
            nav (role: 'navigation') {
                img (src : "imgs/logo.png",  'class' : "logobottom")
                mkp.yield "MEP "
                    a (href : "documentation/index.html", "documentation")
            }

    	}
    	
    	article {
            h2("About this site")
            ul {
                li {
                    a(href : "documentation/about.html","What's here?")
                }
                li {
                    a(href : "documentation/dataset.html", "The data set")
                }
                li {
                    mkp.yield "Analysis by "
                    a(href : "builtUpon/index.html", "Churik and Smith")
		    mkp.yield " (Full interactive text to be added in test 4.)"
                }
                li {
                    a (href : "documentation/licenses.html", "Licenses")
                }
            }

            h2("Automated analyses")
            h3("By single page")
            ul {
                li {
                    mkp.yield "Select from a visual "
                    a (href: "browse", "browser of the edited pages") 
                    mkp.yield " of the Venetus A manuscript."
                }


                li {
                    mkp.yield "Select a specific page by folio/side reference ('r' = 'recto', 'v' = 'verso')"
                    form(action: "vapage") {
                        select(name: "urn") {
                            ms.pageSequence.each { pg ->
                                CiteUrn urn = new CiteUrn(pg)
                                option(value : pg, "${urn.getObjectId()}")
                            }
                        }
                        input(type: "submit", value: "Analyze page")
                    }
                }
                li {
                    mkp.yield "Select a specific page by reference to "
                    em("Iliad")
                    mkp.yield " line."
		    mkp.yield(" Scheduled to be added in test phase 1.")
                }
            }


            h3 {
                mkp.yield "By book of the "
                em("Iliad")
            }
	    p("Scheduled to be added in test 2.")

            h3("Summary analysis of the manuscript")
	    p("Scheduled to be added in test 3.")	
        }
        footer {
            mkp.yield "INSERTFOOTER"
        }
    }
}

String base = writer.toString()
println base.replaceAll('INSERTFOOTER',"""@htmlfooter@""")


