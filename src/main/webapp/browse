/**
* browse:  servlet providing paged browsing of thumbnail images
* for edited pages.
* 
* Optional parameters:
* - limit:  number of folio pages to retrieve.
* - offset: where to begin this page in the sequence of the collection.
*
*/

import edu.holycross.shot.mep.*
import groovy.xml.MarkupBuilder
import edu.harvard.chs.cite.CiteUrn


String contentType = "text/html"
response.setContentType(contentType)
response.setHeader( "Access-Control-Allow-Origin", "*")




String getPage(String limitStr, String offsetStr) {
    Integer limitInt = limitStr as Integer
    Integer offInt = offsetStr as Integer

    // check if gt or lt size of collection ...
    Integer nextOff = offInt + limitInt

    Integer prevOff = offInt - limitInt

    Integer block = 3


    String serverUrl = "@tripleserver@"
    MepGraph graph = new MepGraph(serverUrl)
    String images = "@images@"
    String width = "@thumbw@"

    StringWriter writer = new StringWriter()
    MarkupBuilder html = new MarkupBuilder(writer)

    html.html {
        head {
            title(" Venetus A manuscript: edited pages with scholia")
            link(type : 'text/css',  rel : 'stylesheet',  href : 'css/mep.css', title : 'CSS stylesheet')	
        }
        header {
            nav (role: 'navigation') {
                mkp.yield "MEP: " 
                a (href : "home", "home")
                mkp.yield " | "
                a (href : "documentation/index.html", "documentation")
            }
            h1 ("Edited pages of the Venetus A manuscript")
        }

        body {
            // NS: add checks on max and min vals

            p {

                if (prevOff < 0) {
                    mkp.yield "back"
                } else {
                    String prev = "browse?limit=${limitStr}&offset=${prevOff}"
                    a(href : prev, "back") 
                }
                mkp.yield (" | ")
                String nxt = "browse?limit=${limitStr}&offset=${nextOff}"
                a(href : nxt, "forward") 
            }

            def thumbsList = graph.getEditedThumbs()
            for (i in offInt .. nextOff) {
                def thumb = thumbsList[i][1]
                CiteUrn urn = new CiteUrn(thumbsList[i][0])
                div(class : "thumbnail") {
                    a (href : "vapage?&urn=${urn.toString()}") {
                        img (src : "${images}?request=GetBinaryImage&w=${width}&urn=${thumb}")
                    }
                    p(class : "caption", "page ${urn.getObjectId()}")
                }
            }
        }
    }
    String base = writer.toString()
    return base.replaceAll('INSERTFOOTER',"""@htmlfooter@""")
}
// end of getPage() method



// collect parameters, invoke method to generate page:
String limit ="9"
if ((params.limit != null) && (params.limit != ""))  {
    limit = params.limit
}

String offset = "0"
if ((params.offset != null) && (params.offset != ""))  {
    offset = params.offset
}

println getPage(limit, offset)
