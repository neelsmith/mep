import edu.holycross.shot.mep.*
import groovy.xml.MarkupBuilder

import edu.harvard.chs.cite.CtsUrn
import edu.harvard.chs.cite.CiteUrn

String contentType = "text/html"
response.setContentType(contentType)
response.setHeader( "Access-Control-Allow-Origin", "*")


String serverUrl = "@tripleserver@"

boolean done = false


String  getPageSummary(CiteUrn urn, MepGraph graph) {
    CtsUrn mainScholia = new CtsUrn('urn:cts:greekLit:tlg5026.msA.hmt')

    // get label from query...
    // get basic stats from query...
    MepPage pg = new MepPage(urn,graph)
    MepLayout ml = new MepLayout(pg)


    StringWriter writer = new StringWriter()
    MarkupBuilder html = new MarkupBuilder(writer)
    html.html {
        head {
            title("Page ${urn}")
        }
        body {
            h1 ("Page ${urn}")

            p("Summary:")
            p("Tokens: ${pg.numTokens};  in main scholia: ${pg.countTokensForDocument(mainScholia)}")
            p("Scholia: ${pg.numScholia}; main scholia: ${pg.getScholiaForDocument(mainScholia).size()}")
            
            def cScore = ml.score(pg.commentary, ml.rankScholia(pg.getScholiaForDocument(mainScholia), pg.churikZones), ml.computeChurikRankForIliad() )
        def cright = 0
        cScore.keySet().each { k -> 
            if (cScore[k] == true ) {
                cright++
            }
        }
        p( "churik scores: ${cright}/" + cScore.size() )

        def mScore = ml.score(pg.commentary, ml.rankScholia(pg.getScholiaForDocument(mainScholia), pg.maniaciZones), ml.computeManiaciRankForIliad() )
        def mright = 0
        mScore.keySet().each { k -> 
            if (mScore[k] == true ) {
                mright++
            }
        }
        p( "maniaci scores: ${mright}/" + mScore.size() )


            ul {
                li { 
                    mkp.yield ("See ")
                    a(href : "churikview?urn=${urn}", "Churik view")
                }
                li {
                    mkp.yield ("See ")
                    a(href : "maniaciview?urn=${urn}", "Maniaci view")
                }

            }
        }
    }
    
    return writer.toString()
}



CiteUrn pgUrn  = null
if (request.getParameter("urn")) {
    try {
        pgUrn = new CiteUrn( request.getParameter("urn"))
    } catch (Exception e) {
        println("Need a valid 'urn' parameter:  got '" +pgUrn + "'.  ${e}")
        done = true
    }
} else  {
    println("Need a 'urn' parameter for the page to analyze.")
    done = true
}


if (!done) {
    MepGraph graph = new MepGraph(serverUrl)
    println getPageSummary(pgUrn, graph)
}
