/**
*
* Optional parameters:
* - limit:  page size (ie, number of objects to retrieve).
* - offset: where to begin this page in the sequence of the collection.
*
*/

import edu.holycross.shot.mep.*
import groovy.xml.MarkupBuilder
import edu.harvard.chs.cite.CiteUrn


String contentType = "text/html"
response.setContentType(contentType)
response.setHeader( "Access-Control-Allow-Origin", "*")


String serverUrl = "@tripleserver@"
MepGraph graph = new MepGraph(serverUrl)


String images = "@images@"

String width = "@thumbw@"

String limit ="9"
if ((params.limit != null) && (params.limit != ""))  {
    limit = params.limit
}
Integer limitInt = limit as Integer

String offset = "0"
if ((params.offset != null) && (params.offset != ""))  {
    offset = params.offset
}
Integer offInt = offset as Integer

// check if gt or lt size of collection ...
Integer nextOff = offInt + limitInt

Integer prevOff = offInt - limitInt
if (prevOff < 0) {
    prevOff = 0
}
Integer block = 3




html.html {
    head {
        title(" Venetus A manuscript: edited pages with scholia")
        link(type : 'text/css',  rel : 'stylesheet',  href : 'css/mep.css', title : 'CSS stylesheet')	
    }
    header {
        nav (role: 'navigation') {
            mkp.yield "MEP: " 
            a (href : "home", "home")
            mkp.yield " | "
            a (href : "documentation/index.html", "documentation")
        }
        h1 ("Edited pages of the Venetus A manuscript")
    }

    body {
        // add cheks on max and min vals
        p {
            String prev = "browse?limit=${limit}&offset=${prevOff}"
            a(href : prev, "back") 
            mkp.yield (" | ")
            String nxt = "browse?limit=${limit}&offset=${nextOff}"
            a(href : nxt, "forward") 
        }

        def thumbsList = graph.getEditedThumbs()
        for (i in offInt .. nextOff) {
            def thumb = thumbsList[i][1]
            CiteUrn urn = new CiteUrn(thumbsList[i][0])
            div(class : "thumbnail") {

                a (href : "vapage?&urn=${urn.toString()}") {
                    img (src : "${images}?request=GetBinaryImage&w=${width}&urn=${thumb}")
                }
                p(class : "caption", "page ${urn.getObjectId()}")
            }
        }
    }
}
